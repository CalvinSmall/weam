
# ---------------------------------------------
# WEAM Enterprise Local Environment Configuration
# ---------------------------------------------

# Environment type (options: enterprise, local, dev, prod)
WEAM_ENVIRONMENT=enterprise

# Name of the stack (used for AWS CloudFormation or similar tooling)
STACK_NAME=EnterpriseStack
#Root ENV
ENV_FILE=".env"                              



# --------------------------------------
# Application Gateway & Environment URLs
# --------------------------------------

# Port number used by the FastAPI application gateway
GATEWAY_PORT=9089

# Base URL for the environment (frontend or external service)
ENVIRONMENT_URL=http://localhost:3000



# --------------------------------
# Celery Task Queue Configuration
# --------------------------------

# Redis URL used by Celery as the broker for task distribution
CELERY_BROKEN_URL=redis://redis:6379/7

# Redis URL used by Celery to store task results
CELERY_RESULT_BACKEND=redis://redis:6379/7

# Automatically delete tasks from the backend when completed successfully (true/false)
DELETE_TASK_ON_SUCCESS=true
                          

                          
# -------------------------------
# AWS S3 & CDN Configuration
# -------------------------------

# Type of storage bucket used (e.g., AWS_S3, MINIO, LOCALSTACK)
# BUCKET_TYPE=AWS_S3

# AWS credentials for accessing S3
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=

# AWS region where your S3 buckets are hosted
# AWS_REGION=us-east-1

# S3 bucket name used for storing frontend media files (e.g., images, videos)
# AWS_S3_BUCKET=sample-frontend-media-bucket


# S3 bucket name used for profiler-related data
# PROFILER_S3_BUCKET=sample-profiler

# Base S3 URL pattern (replace <bucket_name> dynamically in code)
# AWS_S3_URL=https://<bucket_name>.s3.amazonaws.com

# CDN URL used to serve static files from S3
# AWS_CDN_URL=https://cdn.example.com  #

# Regex pattern to match specific S3 file keys (e.g., domain-specific files)
# DOMAIN SAMPLE: example.com
# AWS_REGEX_FILE_PATTERN=.*example\.com.*

# S3 bucket for backing up vector data (e.g., from Pinecone or Qdrant)
# AWS_VECTORS_BACKUP="sample-vectors-backup-bucket"


# ----------------------------
# MinIO Local Storage Settings
# ----------------------------

# Bucket type (optional override, e.g., MINIO instead of AWS_S3)
BUCKET_TYPE=MINIO

# Port used by the MinIO S3-compatible API
MINIO_PORT=9000

# Port used for accessing the MinIO Web Dashboard
MINIO_DASHBOARD_PORT=9001

# MinIO access credentials (used in place of AWS credentials)
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin123

# MinIO bucket name for storing frontend media files
AWS_S3_BUCKET=weam-dev-01-frontend-media

# Base endpoint URL for MinIO access
MINIO_ENDPOINT=http://minio:9000

# Regex pattern for matching URLs pointing to MinIO buckets
MINIO_REGEX_FILE_PATTERN=^https?://(?:localhost|minio):9000/



# -------------------------------------
# Email Provider Configuration (SES/SMTP)
# -------------------------------------

# Type of email service used (options: SES, SMTP)
# EMAIL_PROVIDER=SES

# AWS SES: Verified sender email address (must be verified in AWS SES)
# AWS_SES_VERIFIED_MAIL=verified@example.com


# Uncomment below and switch EMAIL_PROVIDER to SMTP to use SMTP settings instead
EMAIL_PROVIDER=SMTP

# SMTP authentication credentials
SMTP_USER=
SMTP_PASSWORD=

# Email address used as the sender in outgoing emails
SMTP_SENDER_EMAIL=

# SMTP server configuration
SMTP_PORT=
SMTP_SERVER=

# -----------------------------
# MongoDB Development Settings
# -----------------------------

## Cloud MongoDB (MongoDB Atlas or similar)
# Full MongoDB connection URI (replace placeholders with actual credentials and host)
# MONOGODB_URI=mongodb+srv://<user_name>:<password>@<hostname>/?retryWrites=true&w=majority

## Local MongoDB Setup

MONOGODB_URI=mongodb://admin:password@mongodb:27017/
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=password

# Name of the MongoDB database used by the application
DB_DATABASE=weam-01

# Default MongoDB port (typically 27017)
MONGO_PORT=27017





# ---------------------------
# Qdrant Vector DB Configuration
# ---------------------------

## Cloud Qdrant (Uncomment to use managed Qdrant service)

# QDRANT_URL=https://<your-qdrant-instance>.us-west-1-0.aws.cloud.qdrant.io:6333
# QDRANT_API_KEY=<your_qdrant_api_key>

## Local Qdrant Setup

# URL of the primary local Qdrant container
LOCAL_QDRANT_URL=http://qdrant_primary_container:6333

# Port used for the Qdrant web interface or dashboard
QDRANT_DASHBOARD_PORT=6333

# Port exposed for internal API or external access (if different from dashboard)
QDRANT_NODE_PORT=6335


# --------------------------
# JWT Authentication Settings
# --------------------------

# Secret key used to sign and verify JWT tokens (keep this secure and private)
JWT_SECRET=AEuIFOR42cWRI4xMnV4gIo4Y49VhMMLScFvgG7Ptq4TxvHT933

# Algorithm used for encoding and decoding JWTs (commonly HS256)
JWT_ALGORITHM=HS256

# Security key used for encrypting sensitive data stored in the database
# Important: Do not change this key once set, or existing encrypted data will become unreadable
SECURITY_KEY=a4CaOeZBeho4U37c

# --------------------------
# WDB (Web Debugger) Settings
# --------------------------

# Hostname or container name where the WDB socket server is running
WDB_SOCKET_SERVER=wdb

# Prevents WDB from automatically opening a browser window (1 = true)
WDB_NO_BROWSER_AUTO_OPEN=1

# Port on which the WDB debugger server listens
WDB_PORT=1984

# ----------------------------
# SEO Agent Authentication
# ----------------------------

# Username or user ID used to authenticate with the SEO agent service
# DATA FOR SEO Credential reference https://dataforseo.com/

SEO_USER_ID=
# Password or API key used for authentication (keep this secure)
SEO_PASSWORD=