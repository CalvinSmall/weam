services:

  redis:
    image: "redis/redis-stack:latest" # Image name local developement with dashboard
    container_name: redis_container # Container name
    volumes:
      - redis_data:/data
    networks:
      - enterprise_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 5

  pybase_docker:
    env_file: ${ENV_FILE}
    build:
      context: .
      dockerfile: BaseDockerfile
    image: pybase_image

  celery_service:
    env_file: ${ENV_FILE}
    image: celery_app:latest # Custom image name
    container_name: celery_service # Container name
    depends_on:
      - pybase_docker
      - redis
    networks:
      - enterprise_network
    entrypoint: /usr/local/bin/celery_entrypoint.sh
   

  extraction_worker:
    env_file: ${ENV_FILE}
    image: extraction_worker:latest # Custom image name
    container_name: extraction_worker_svc # Container name
    depends_on:
      - pybase_docker
      - redis
    networks:
      - enterprise_network
    entrypoint: /usr/local/bin/extraction_worker.sh

  scrapper_worker:
    env_file: ${ENV_FILE}
    image: scrapper_worker:latest # Custom image name
    container_name: scrapper_worker_svc # Container name
    depends_on:
      - pybase_docker
      - redis
    networks:
      - enterprise_network
    entrypoint: /usr/local/bin/scraper_worker.sh
    

  import_worker:
    env_file: ${ENV_FILE}
    image: import_worker:latest # Custom image name
    container_name: import_worker_svc # Container name
    depends_on:
      - pybase_docker
      - redis
    networks:
      - enterprise_network
    entrypoint: /usr/local/bin/import_chat_worker.sh
    
  
  
  gateway:
    env_file: ${ENV_FILE}
    image: gateway_app:latest # Custom image name
    container_name: gateway_service # Container name
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - pybase_docker
      - redis
      - celery_service
      - extraction_worker
      - qdrant_primary
    networks:
      - enterprise_network
    command: uvicorn src.gateway.web:app --host 0.0.0.0 --port ${GATEWAY_PORT} --reload --workers 2

  qdrant_primary:
    image: "qdrant/qdrant:latest"
    container_name: qdrant_primary_container  # ðŸ‘ˆ Add this to both nodes
    ports:
      - "${QDRANT_DASHBOARD_PORT}:${QDRANT_DASHBOARD_PORT}"
      - "${QDRANT_NODE_PORT}:${QDRANT_NODE_PORT}"  # ðŸ‘ˆ Add this to both nodes
    environment:
      QDRANT__CLUSTER__ENABLED: "true"
      RUST_LOG: "trace"
    command: ["./qdrant", "--uri", "http://qdrant_primary:${QDRANT_NODE_PORT}", "--config-path", "/qdrant/config/config.yaml"]
    volumes:
      - qdrant_primary_data:/qdrant/storage
      - qdrant_primary_snapshots:/qdrant/snapshots
      - ./config_files/qdrant:/qdrant/config:ro  # Mount the config.yaml file
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - enterprise_network

  qdrant_secondary:
    image: "qdrant/qdrant:latest"
    ports:
      - "6334:6333"  # ðŸ‘ˆ Add this to both node
    environment:
      QDRANT__CLUSTER__ENABLED: "true"
      RUST_LOG: "trace"
    command: ["./qdrant", "--bootstrap", "http://qdrant_primary:${QDRANT_NODE_PORT}", "--config-path", "/qdrant/config/config.yaml"]
    volumes:
      - qdrant_secondary_data:/qdrant/storage
      - qdrant_secondary_snapshots:/qdrant/snapshots
      - ./config_files/qdrant:/qdrant/config:ro
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 60s  # Increased interval
      timeout: 20s  # Increased timeout
      retries: 10   # Increased retries
    networks:
      - enterprise_network
  mongodb:
    image: mongo:latest
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db
    networks:
      - enterprise_network


  
  

volumes:
  mongo-data:
  redis_data:

  app:
  db:
  qdrant_primary_data:
  qdrant_primary_snapshots:
  qdrant_secondary_data:
  qdrant_secondary_snapshots:

networks:
  enterprise_network:
    name: enterprise_network
    driver: bridge