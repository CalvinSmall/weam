services:
  redis:
    image: "redis/redis-stack:latest"
    container_name: redis_container
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 5
  app:
    build:
      context: ./nextjs # CORRECTED: Was ./nodejs
      dockerfile: Dockerfile
    container_name: weam-frontend-container
    ports:
      - "3000:3000"
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
    depends_on:
      - nodejs
      - mongo

  nodejs:
    build:
      context: ./nodejs
      dockerfile: Dockerfile
    container_name: node_app
    ports:
      - "4050:4050"
    volumes:
      - nodejs_storage:/usr/src/app/storage # CHANGED: Using a named volume for persistence
    networks:
      - app-network
    depends_on:
      - mongo
      - minio

  celery_service:
    build:
      context: ./ai-python
      dockerfile: DockerfileRed
    container_name: celery_service
    depends_on:
      - redis
      - mongo
    networks:
      - app-network
    entrypoint: /usr/local/bin/celery_entrypoint.sh

  extraction_worker:
    build:
      context: ./ai-python
      dockerfile: src/celery_worker_hub/extraction/Dockerfile
    container_name: extraction_worker_svc
    depends_on:
      - redis
      - mongo
    networks:
      - app-network
    entrypoint: /usr/local/bin/extraction_worker.sh

  scrapper_worker:
    build:
      context: ./ai-python
      dockerfile: src/celery_worker_hub/web_scraper/Dockerfile
    container_name: scrapper_worker_svc
    depends_on:
      - redis
      - mongo
    networks:
      - app-network
    entrypoint: /usr/local/bin/scraper_worker.sh

  import_worker:
    build:
      context: ./ai-python
      dockerfile: src/celery_worker_hub/import_worker/Dockerfile
    container_name: import_worker_svc
    depends_on:
      - redis
      - mongo
    networks:
      - app-network
    entrypoint: /usr/local/bin/import_chat_worker.sh

  gateway:
    build:
      context: ./ai-python
      dockerfile: Dockerfile
    container_name: gateway_service
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - redis
      - celery_service
      - extraction_worker
      - qdrant_primary
      - mongo
    networks:
      - app-network
    command: uvicorn src.gateway.web:app --host 0.0.0.0 --port ${GATEWAY_PORT} --workers 2 # REMOVED --reload

  mcp:
    build:
      context: ./ai-python
      dockerfile: src/MCP/DockerFile
    container_name: mcp_server
    ports:
      - "${MCP_PORT}:${MCP_PORT}"
    networks:
      - app-network
    depends_on:
      - redis
      - mongo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant_primary:
    image: "qdrant/qdrant:latest"
    container_name: qdrant_primary
    ports:
      - "${QDRANT_DASHBOARD_PORT}:${QDRANT_DASHBOARD_PORT}"
    environment:
      QDRANT__CLUSTER__ENABLED: "true"
      QDRANT__LOG_LEVEL: INFO
    command: "./qdrant --uri http://qdrant_primary:6333"
    volumes:
      - qdrant_primary_data:/qdrant/storage
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  qdrant_secondary:
    image: "qdrant/qdrant:latest"
    container_name: qdrant_secondary
    depends_on:
      - qdrant_primary
    environment:
      QDRANT__CLUSTER__ENABLED: "true"
      QDRANT__LOG_LEVEL: INFO
    command: "./qdrant --bootstrap http://qdrant_primary:6333 --uri http://qdrant_secondary:6333"
    volumes:
      - qdrant_secondary_data:/qdrant/storage
    restart: always
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: weamai-mongo-1
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=test
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_DASHBOARD_PORT}:${MINIO_DASHBOARD_PORT}"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: server /data --console-address ":${MINIO_DASHBOARD_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_PORT}/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/minio.sh"]
    volumes:
      - ./ai-python/minio.sh:/minio.sh:ro
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis_data:
  minio_data:
  nodejs_storage:
  qdrant_primary_data:
  qdrant_secondary_data:
